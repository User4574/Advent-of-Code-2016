#!/usr/bin/env ruby

class Bot
  attr_accessor :low, :high, :chips

  def initialize(low, high, chips)
    @low = low
    @high = high
    @chips = chips
  end

  def pass(newbots, outputs)
    if @chips.length == 2 then
      lowchip = @chips.min
      highchip = @chips.max
      @chips = []
      if @low.first == "bot" then
        newbots[@low.last].chips << lowchip
      else
        outputs[@low.last] = lowchip
      end
      if @high.first == "bot" then
        newbots[@high.last].chips << highchip
      else
        outputs[@high.last] = highchip
      end
      return true
    end
    return false
  end

  def is_comparing?(a, b)
    return @chips.include?(a) && @chips.include?(b)
  end
end

instructions = File.readlines("input").map(&:chomp)

bots = []
outputs = []

instructions.each do |istr|
  bits = istr.split
  case bits[0]
  when "value"
    botno = bits[5].to_i
    chipval = bits[1].to_i
    if bots[botno].nil? then
      bots[botno] = Bot.new(0, 0, [chipval])
    else
      bots[botno].chips << chipval
    end
  when "bot"
    botno = bits[1].to_i
    low = bits[5] == "bot" ? ["bot", bits[6].to_i] : ["bin", bits[6].to_i]
    high = bits[10] == "bot" ? ["bot", bits[11].to_i] : ["bin", bits[11].to_i]
    if bots[botno].nil? then
      bots[botno] = Bot.new(low, high, [])
    else
      bots[botno].low = low
      bots[botno].high = high
    end
  end
end

gotit = false

until gotit do
  break unless outputs[0].nil? || outputs[1].nil? || outputs[2].nil?

  newbots = []
  bots.each_with_index do |bot, i|
    newbots[i] = Bot.new(bot.low, bot.high, [])
  end

  bots.each_with_index do |bot, i|
    passed = bot.pass(newbots, outputs)
    unless passed then
      newbots[i].chips += bot.chips
    end
  end

  bots = newbots
end

puts outputs[0] * outputs[1] * outputs[2]
